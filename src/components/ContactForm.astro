---
---

<section class="contact-section">
  <div class="container">
    <h2 class="section-title">Contact Us</h2>
    <form class="contact-form" id="contactForm">
      <div class="form-group">
        <label for="name">Name</label>
        <input type="text" id="name" name="name" required aria-required="true" />
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" required aria-required="true" />
      </div>
      <div class="form-group">
        <label for="phone">Phone</label>
        <input type="tel" id="phone" name="phone" />
      </div>
      <div class="form-group">
        <label for="message">Message</label>
        <textarea id="message" name="message" required aria-required="true"></textarea>
      </div>
      <button type="submit" class="submit-button">Submit</button>
    </form>
    <div id="formFeedback" class="feedback-message"></div>
  </div>
</section>

<script>
  import { trackFormSubmission } from '../pages/analytics.js';

  document.getElementById('contactForm')!.addEventListener('submit', async function (event) {
    // todo this is the proper way to handle form submission in Astro as there're many type errors
    event.preventDefault();

    const form = event.target!;
    const name = form.name.value.trim();
    const email = form.email.value.trim();
    const phone = form.phone.value.trim();
    const message = form.message.value.trim();

    const feedback = document.getElementById('formFeedback')!;
    const submitButton = form.querySelector('.submit-button');

    let isValid = true;
    let errorMessage = '';

    if (!name) {
      isValid = false;
      errorMessage += 'Name is required.\n';
    }

    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      isValid = false;
      errorMessage += 'Valid email is required.\n';
    }

    if (!message) {
      isValid = false;
      errorMessage += 'Message is required.\n';
    }

    if (!isValid) {
      feedback.textContent = errorMessage;
      feedback.className = 'error-message';
      return;
    }

    feedback.textContent = 'Submitting...';
    feedback.className = 'loading-message';
    submitButton.disabled = true;

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, phone, message })
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      feedback.textContent = 'Thank you for your message! We will get back to you soon.';
      feedback.className = 'success-message';
      form.reset();

      trackFormSubmission({ name, email, phone, message });
    } catch (error) {
      feedback.textContent = 'There was an error submitting the form. Please try again later.';
      feedback.className = 'error-message';
    } finally {
      submitButton.disabled = false;
    }
  });
</script>

<style>
  .contact-section {
    padding: 4rem 2rem;
    background: linear-gradient(135deg, var(--color-light), white);
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .section-title {
    font-size: var(--text-2xl);
    text-align: center;
    margin-bottom: 2rem;
    color: var(--color-primary);
  }

  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  label {
    font-weight: 500;
    color: var(--color-primary);
    margin-bottom: 0.5rem;
    display: block;
  }

  input, textarea {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid var(--color-gray-200);
    border-radius: 8px;
    font-size: var(--text-base);
    transition: all 0.3s ease;
    background-color: white;
  }

  input:focus, textarea:focus {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 4px rgba(26, 35, 126, 0.1);
    outline: none;
  }

  textarea {
    min-height: 150px;
    resize: vertical;
  }

  .submit-button {
    background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: var(--text-base);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .feedback-message {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 8px;
    font-weight: 500;
    animation: fadeIn 0.5s ease-in-out;
  }

  .success-message {
    background-color: #d1fae5;
    color: #065f46;
  }

  .error-message {
    background-color: #fee2e2;
    color: #dc2626;
  }

  .loading-message {
    background-color: #e0e7ff;
    color: var(--color-primary);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
