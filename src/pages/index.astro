---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import ProductShowcase from '../components/ProductShowcase.astro';
import ContactSection from '../components/ContactSection.astro';
import { trackPageView } from './analytics.js';

trackPageView();

// Parse URL parameters with base64 decode
const url = new URL(Astro.request.url);
const successParam = url.searchParams.get('s');
const errorsParam = url.searchParams.get('e');

// Decode base64 parameters
let showSuccessMessage = false;
let errors = { name: '', email: '', message: '' };

if (successParam) {
  showSuccessMessage = atob(successParam) === 'true';
}

if (errorsParam) {
  try {
    errors = JSON.parse(atob(errorsParam));
  } catch (e) {
    console.error('Error decoding parameters:', e);
  }
}

let status = 200;

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    
    const response = await fetch('/api/contact', {
      method: 'POST',
      body: data,
    });

    const result = await response.json();

    if (!response.ok) {
      showSuccessMessage = false;
      status = response.status;
      if (result.errors) {
        errors = result.errors;
      } else {
        errors.name = result.message || 'There was an error submitting the form. Please try again later.';
      }
    } else {
      showSuccessMessage = true;
      // Track the submission if needed
      // trackFormSubmission(Object.fromEntries(data));
    }
  } catch (error) {
    console.error('Error submitting form:', error);
    showSuccessMessage = false;
    status = 500;
    errors.name = 'There was an error submitting the form. Please try again later.';
  } finally {
    // Base64 encode parameters before redirect
    const encodedSuccess = btoa(showSuccessMessage.toString());
    const encodedErrors = btoa(JSON.stringify(errors));
    return Astro.redirect(`/?s=${encodedSuccess}&e=${encodedErrors}#contact`);
  }
}

Astro.response.status = status;
---
<Layout>
  <Hero />
  <ProductShowcase />
  <ContactSection />
  <section class="contact-section" id="contact">
    <div class="container">
      <h2 class="section-title">Contact Us</h2>
      {showSuccessMessage && (
        <div class="feedback-message success-message">
          Thank you for your message! We will get back to you soon.
        </div>
      )}
      <form class="contact-form" method="POST">
        <div class="form-group">
          <label for="name">Name</label>
          <input 
            type="text" 
            id="name" 
            name="name" 
            required 
            aria-required="true"
          />
          {errors.name && <p class="error-text">{errors.name}</p>}
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            required 
            aria-required="true"
          />
          {errors.email && <p class="error-text">{errors.email}</p>}
        </div>
        <div class="form-group">
          <label for="phone">Phone</label>
          <input 
            type="tel" 
            id="phone" 
            name="phone"
          />
        </div>
        <div class="form-group">
          <label for="message">Message</label>
          <textarea 
            id="message" 
            name="message" 
            required 
            aria-required="true"
          ></textarea>
          {errors.message && <p class="error-text">{errors.message}</p>}
        </div>
        <button type="submit" class="submit-button">Submit</button>
      </form>
    </div>
  </section>
</Layout>

<style>
  .contact-section {
    padding: 2rem 1rem;
    background: linear-gradient(135deg, var(--color-light), white);
  }

  .container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .section-title {
    font-size: var(--text-2xl);
    text-align: center;
    margin-bottom: 2rem;
    color: var(--color-primary);
  }

  .contact-form {
    display: flex;
    flex-direction: column;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  label {
    font-weight: 500;
    color: var(--color-primary);
    margin-bottom: 0.5rem;
    display: block;
  }

  input, textarea {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid var(--color-gray-200);
    border-radius: 8px;
    font-size: var(--text-base);
    transition: all 0.3s ease;
    background-color: white;
  }

  input:focus, textarea:focus {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 4px rgba(26, 35, 126, 0.1);
    outline: none;
  }

  textarea {
    min-height: 150px;
    resize: vertical;
  }

  .submit-button {
    background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
    color: white;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: var(--text-base);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
  }

  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .submit-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .feedback-message {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 8px;
    font-weight: 500;
    animation: fadeIn 0.5s ease-in-out;
  }

  .success-message {
    background-color: #d1fae5;
    color: #065f46;
  }

  .error-message {
    background-color: #fee2e2;
    color: #dc2626;
  }

  .loading-message {
    background-color: #e0e7ff;
    color: var(--color-primary);
  }

  /* Add new styles for error text */
  .error-text {
    color: #dc2626;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
